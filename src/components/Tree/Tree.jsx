import { tree } from "d3-hierarchy";
import { select, linkHorizontal, linkRadial, geoPath, geoMercator } from "d3";
import { useEffect } from "react/cjs/react.development";
import { filteredCaliData, groupByName, root } from "./data/treeData";
import { feature } from "topojson-client";
import { caliData } from "../Map/data/caliData";

const width = window.innerWidth / 2;
const radius = width / 2;
export const Tree = () => {
  useEffect(() => {
    var treemap = tree()
      .size([2 * Math.PI, radius])
      .separation((a, b) => (a.parent === b.parent ? 1 : 2) / a.depth);
    const final = treemap(root);
    const nodesGroup = select("#nodes");
    const linksGroup = select("#links");
    const polygonGroup = select("#polygon");

    linksGroup
      .selectAll("line")
      .data(final.links())
      .join("path")
      .attr(
        "d",
        linkRadial()
          .angle((d) => d.x)
          .radius((d) => d.y)
      )
      .attr("stroke", "grey")
      .attr("fill", "none");

    nodesGroup
      .selectAll("circle")
      .data(root.descendants())
      .join("rect")
      .attr(
        "transform",
        (d) => `
        rotate(${(d.x * 180) / Math.PI - 90})
        translate(${d.y},0)
      `
      )
      .attr("fill", (d) => (d.children ? "#555" : "#999"))
      .attr("r", 2.5);

    nodesGroup
      .selectAll("text")
      .data(root.descendants())
      .join("text")
      .attr(
        "transform",
        (d) => `
          rotate(${(d.x * 180) / Math.PI - 90})
          translate(${d.y},0)
          rotate(${d.x >= Math.PI ? 180 : 0})
        `
      )
      .attr("dy", "0.31em")
      .attr("x", (d) => (d.x < Math.PI && !d.children ? 6 : -6))
      .attr("text-anchor", (d) =>
        d.x < Math.PI && !d.children ? "start" : "end"
      )
      .text((d) => d.data.US_L4CODE)
      .attr("font-size", "0.75rem");

    // nodesGroup
    //   .selectAll("path")
    //   .data(root.descendants())
    //   .join("path")
    //   .attr(
    //     "transform",
    //     (d) => `
    //       rotate(${(d.x * 180) / Math.PI - 90})
    //       translate(${d.y},0)
    //       rotate(${d.x >= Math.PI ? 180 : 0})
    //     `
    //   )
    //   .attr(
    //     "d",
    //     "M150.87588663842195,136.381296088745L150.90524599054146,136.35869300369063L150.9707726604894,136.36146084162527L150.99587703404092,136.34577600876526L151.03502283686686,136.35961561984706L151.06693517612723,136.35546381948933L151.08352959254267,136.3287060667305L151.10310249395565,136.37483827948697L151.10480448538289,136.4223452829159L151.08395509039946,136.45324290141212L151.10352799181248,136.46292641945325L151.11714392323023,136.45047611096237L151.13416383750246,136.4643097476157L151.14650327534974,136.48966936599408L151.1788411124669,136.52839530443407L151.19245704388464,136.53254414556756L151.21202994529767,136.56066219943972L151.21756141743612,136.59154221018133L151.21075345172727,136.60398528322418L151.21245544315445,136.64038913097397L151.25117574812373,136.65006518501147L151.26223869240067,136.66941613658446L151.27074864953676,136.70304626522716L151.27245064096394,136.73667173887736L151.3086179587923,136.76845044349028L151.3128729373604,136.82048485628593L151.32053189878292,136.84166381712242L151.31414943093085,136.85409408714696L151.28989605309295,136.84718846002997L151.28096059810002,136.8807940003128L151.30649046950833,136.8959840219303L151.31627692021482,136.9217588576922L151.3396793023391,136.93510546722865L151.36861315660184,136.9769814547583L151.38180359016275,136.98618400258567L151.4656266679533,137.00596830214093L151.47796610580065,137.02161056334145L151.4681796550941,137.07267094944925L151.47456212294622,137.10256620522338L151.47583861651663,137.15360962117893L151.4724346336622,137.177977930601L151.47924259937105,137.2133766044622L151.51370792577222,137.25658360152994L151.56093818787758,137.28232030046647L151.5698736428705,137.29656623351667L151.60646645855564,137.33562339383846L151.61412541997817,137.36089234150379L151.56859714930005,137.3631893887668L151.56646966001603,137.3788087365707L151.57880909786337,137.40085787827203L151.57668160857935,137.43622421523162L151.58093658714745,137.47158542791237L151.57200113215453,137.49178953547516L151.59412702070836,137.5074006552827L151.61199793069414,137.5312745551356L151.64305927424084,137.55973653951642L151.69411901705752,137.61297908847396L151.72773334774502,137.65290338731313L151.78219707341606,137.6946563084182L151.82134287624206,137.71484197647158L151.86176517263857,137.76208827463978L151.8945285076125,137.78226837707706L151.91537790259588,137.79052339365617L151.95069422471067,137.83546248638402L151.96643764541244,137.88497764249178L151.97537310040536,137.92485756771404L151.96260816470124,137.93310777564454L151.93537630186574,137.92669097128135L151.89708149475325,137.89781327002027L151.79198352412254,137.80198823230705L151.7664536527143,137.771261254891L151.74602975558764,137.75704298884233L151.71411741632727,137.7602536373019L151.72049988417933,137.78089251389338L151.74262577273322,137.80657401731668L151.77921858841836,137.85609501903247L151.78900503912485,137.8913955403961L151.82389586338292,137.95694014812986L151.83666079908704,137.9697720033472L151.87027512977465,137.9844361574552L151.89240101832843,138.01651093386658L151.9051659540326,138.02292538516355L151.92090937473438,138.0545370130331L151.9255898511592,138.08018982899006L151.94473725471545,138.12828162252083L151.95452370542193,138.17315878551767L151.97494760254864,138.23221926730184L151.98133007040065,138.2610575906952L151.97664959397582,138.29629982766778L151.9843085553983,138.30728338641302L151.993669508248,138.3631088780586L151.993669508248,138.3841545385473L151.98090457254386,138.40336856628727L151.94941773114027,138.40474093931186L151.92686634472966,138.38369704337072L151.9094209326006,138.38689949170623L151.91410140902553,138.41114524535294L151.93792928900655,138.4381329859968L151.9430352632882,138.45276916440622L151.91580340045272,138.45093968979756L151.87623209976988,138.42852751991973L151.85836118978403,138.4244107765996L151.83325681623262,138.4376755913684L151.82857633980774,138.3580759528159L151.83495880765986,138.30728338641302L151.85708469621363,138.28806183597987L151.88261456762189,138.28485809785485L151.91282491545502,138.26426163960247L151.92261136616156,138.24320569500765L151.9098464304575,138.19696782264833L151.89537950332613,138.1827742518663L151.865169155493,138.169953546275L151.84134127551187,138.17453244665285L151.8204918805285,138.169953546275L151.8030464683995,138.14110450736234L151.77624010342078,138.1250757965022L151.7217763777498,138.12003798519055L151.67752460064207,138.12965553512305L151.65965369065628,138.12828162252083L151.63582581067516,138.11225207313555L151.59753100356278,138.11225207313555L151.58646805928583,138.1186640186812L151.54987524360064,138.12324387709575L151.51328242791544,138.11545806687485L151.48945454793437,138.0994276788077L151.46392467652612,138.10263384029915L151.44307528154263,138.08980894266836L151.40648246585744,138.04170959782982L151.36988965017224,138.02109270193228L151.3426577873367,137.98122844877412L151.30606497165155,137.95556526661602L151.26606817311188,137.93631611475845L151.16437418533553,137.90148046854273L151.13203634821838,137.84554971970877L151.11629292751667,137.826291913378L151.07459413754975,137.80428113555757L151.05076625756874,137.76575750802675L151.03629933043732,137.71117197897402L151.0311933561557,137.67125719819813L151.0167264290243,137.62812355592087L151.00225950189292,137.59783368224788L150.9894945661888,137.58314633099167L150.96736867763497,137.57350727679915L150.89545953983497,137.57396628800478L150.87631213627873,137.56294978099254L150.86524919200184,137.54045620284757L150.86354720057466,137.51933789698109L150.87971611913315,137.50235010810286L150.90779897768232,137.48673866534276L150.93162685766333,137.4610235243186L150.930350364093,137.42657935890998L150.92141490910006,137.406369852374L150.89971451840302,137.37972749059355L150.89843802483261,137.35170393613947L150.90737347982548,137.33608285261712L150.96694317977813,137.27358851070744L151.00608898260418,137.2515278592395L151.02523638616037,137.22854589079174L151.03034236044203,137.16096634878568L151.03629933043732,137.12234105004472L151.01970491402193,137.09566762577967L150.98906906833201,137.0855493557533L150.9677941754918,137.09198830350354L150.94992326550596,137.13153810527888L150.9256698876681,137.1329176336132L150.88737508055567,137.07175103722068L150.8529097541545,137.0220706146301L150.77632013992962,136.93924736958738L150.75291775780533,136.91761665756442L150.7120699635521,136.8319953899612L150.67888113072132,136.81311782871217L150.64952177860187,136.76614777846203L150.62526840076396,136.74219876865897L150.55974173081597,136.6454575883156L150.52910588512606,136.61688853724783L150.50868198799947,136.59200307611198L150.45209077304446,136.58186382352048L150.41634895307283,136.55236540759967L150.40571150665272,136.5320831667222L150.3520987766953,136.4822922958919L150.27976414103853,136.42465121126685L150.2508302867758,136.39374994943142L150.2333848746468,136.3868312169164L150.23295937679,136.36053823249193L150.20913149680894,136.31578747354575L150.2470008060646,136.29179397324089L150.2669992053344,136.29271684410753L150.2814661324657,136.3093279187009L150.3074215017308,136.35407987023424L150.33848284527755,136.35546381948933L150.36911869096747,136.3734544408369L150.41251947236157,136.3928274631699L150.45549475589883,136.42880182704494L150.46825969160307,136.4472481488798L150.5201704301332,136.48736405568445L150.53250986798054,136.52516837895587L150.55208276939356,136.530700224932L150.60952498006213,136.53577097296633L150.63165086861602,136.53438805219224L150.6593082293083,136.54406833211988L150.68866758142786,136.56619323643895L150.73632334138995,136.57310685545L150.77249065921836,136.5675759759951L150.80142451348115,136.58831612416884L150.8226994063213,136.61320196321577L150.8405703163071,136.62011424360875L150.8865240848421,136.58923786740434L150.93120135980655,136.57541135136086L150.94056231265625,136.5625058924441L150.94481729122424,136.52194141056475L150.94056231265625,136.5011955889713L150.89588503769176,136.4606208549844L150.87758862984919,136.40758682220508Z"
    //   );
    // const projection = geoMercator(); //.scale(200);

    // const polygons = feature(caliData, caliData.objects.convert);

    // const pathGenerator = geoPath().projection(projection);

    // console.log(
    //   polygons.features,
    //   root.descendants(),
    //   root.descendants().filter((x) => !x.children)
    // );

    // const l4Codes = filteredCaliData.map((x) => x.US_L4CODE);
    // console.log(l4Codes);

    //     nodesGroup
    //       .selectAll("path")
    //       .data(l4Codes)
    //       .join("path")
    //       .attr("fill", "red")
    //       .attr("fill-opacity", 0.7)
    //       .attr("stroke", "none")
    //       .attr("stroke-opacity", 0.6)
    //       .attr("class", (d) => d)
    //       .attr("d", (d) =>
    //         pathGenerator(
    //           polygons.features.filter((x) => x.properties.US_L4CODE === d)[0]
    //         )
    //       )
    //       .attr("transform", (d) => {
    //         const filt = root
    //           .descendants()
    //           .filter((x) => x.data.US_L4CODE === d)[0];
    //         console.log(filt);
    //         return `
    // rotate(${(filt.x * 180) / Math.PI - 90})
    // scale(6)
    // translate(${filt.y - 600},0)
    // `;
    //       })
    //       .attr("dy", "0.31em");
  });
  return (
    <g
      transform={
        "translate(" +
        window.innerWidth / 2 +
        "," +
        window.innerHeight / 2 +
        ")"
      }
    >
      <g id="nodes"></g>
      <g id="links"></g>
      <g id="polygon"></g>
    </g>
  );
};
